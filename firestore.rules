rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    function isOwner(uid) {
      return request.auth.uid == uid;
    }

    // Users can only read and write their own profile data.
    match /users/{uid} {
      allow read, write: if isOwner(uid);
    }

    // Users can create and read their own event logs.
    match /events/{uid}/items/{id} {
      allow create: if isOwner(uid);
      allow read: if isOwner(uid);
      allow update, delete: if false;
    }

    // Users can read and write their own session data.
    match /sessions/{uid}/items/{id} {
      allow read, write: if isOwner(uid);
    }

    // Collaboration rooms
    match /rooms/{roomId} {
      allow read: if true;
      // Allow signed-in users to update room metadata (like lastStrokeSeq)
      allow update: if isSignedIn();
      // Only signed-in users can create rooms (handled by API security)
      allow create: if isSignedIn();

      // Strokes subcollection
      match /strokes/{seq} {
        allow read: if true;
        // Allow signed-in users to create valid strokes
        allow create: if isSignedIn()
                      && request.resource.data.seq is int
                      && request.resource.data.points.size() > 0;
        // Strokes are immutable
        allow update, delete: if false;
      }

      // Presence subcollection
      match /presence/{uid} {
        allow read: if true;
        // Users can only write to their own presence document
        allow write: if isOwner(uid);
      }

      // TODO: Add rules for other subcollections like shapes, texts, notes
    }

    // Public configuration is read-only for everyone.
    match /configs/{doc} {
      allow read: if true;
      allow write: if false;
    }
  }
}
